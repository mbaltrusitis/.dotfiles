# vim: filetype=make
# Installs terminal-based applications.
#
# When adding a new application see if the system's package manager is running
# a recent enough version of the software you're looking for and if so, include
# it in the `common` goal.
#
# If there's a ppa or other repo that can be added, break it out into its own
# set of goals.
#
# Since most of the time these dotfiles are running atop an LTS distribution,
# some tools need to be built from source or have the `.deb`s downlaoded out
# of band from apt repositories.
#
# For software needing to add a repo or, being built from source, be sure to
# have a suitable target for your set(s) of goals so that frequent execution of
# the default `make all` goal of the parent `Makefile` can be run quickly.

.ONESHELL:

SHELL := /bin/bash
.SHELLFLAGS := $(DOTSHELLFLAGS)

BASH_ENV := $(BASH_ENV)
DOTFILE_DIR := $(DOTFILE_DIR)
OS := $(OS)

all: common 1password-cli asdf aws-cli bat borgmatic direnv eza fastfetch hexyl flyctl k9s \
	net-tools nvim veracrypt woff-tools z

common:
	sudo apt-get install --yes \
		btop \
		containerd.io \
		docker-buildx-plugin \
		docker-ce \
		docker-ce-cli \
		docker-ce-rootless-extras \
		docker-compose-plugin \
		fzf \
		ripgrep \
		tldr \
		tmux
.PHONY: common

AWS_VERSION ?= $(2.18.0)
AWS_DOWNLOAD_DIR := /tmp/aws-cli
AWS_PGP_KEY_PATH := $(AWS_DOWNLOAD_DIR)/awscliv2.sig
AWS_DOWNLOAD_PATH := $(AWS_DOWNLOAD_DIR)/aws.zip

1password-cli: /usr/bin/op
.PHONY: 1password-cli

/usr/bin/op:
	LOG_INFO "Installing 1password CLI (op)"
	curl -sSL https://downloads.1password.com/linux/keys/1password.asc |\
	sudo gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg
	echo "deb [arch=$$(dpkg --print-architecture) signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/$$(dpkg --print-architecture) stable main" |\
	sudo tee /etc/apt/sources.list.d/1password.list
	sudo mkdir -p /etc/debsig/policies/AC2D62742012EA22/
	curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol |\
		sudo tee /etc/debsig/policies/AC2D62742012EA22/1password.pol
	sudo mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22
	curl -sS https://downloads.1password.com/linux/keys/1password.asc |\
		sudo gpg --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg
	sudo apt-get update
	sudo apt-get install --yes 1password-cli

asdf:
	$(MAKE) -f ./Makefile.asdf
.PHONY: asdf

aws-cli: /usr/local/bin/aws

/usr/local/bin/aws:
	mkdir -p $(AWS_DOWNLOAD_DIR)
	curl -sSLo $(AWS_DOWNLOAD_PATH) \
		"https://awscli.amazonaws.com/awscli-exe-linux-x86_64-$(AWS_VERSION).zip"
	curl -sSLo $(AWS_DOWNLOAD_DIR)/awscliv2.sig \
		"https://awscli.amazonaws.com/awscli-exe-linux-x86_64-$(AWS_VERSION).zip.sig"
	import_pgp_key_by_file $(AWS_PGP_KEY_PATH)
	gpg --verify $(AWS_PGP_KEY_PATH) $(AWS_DOWNLOAD_PATH)
	unzip -d $(AWS_DOWNLOAD_DIR) $(AWS_DOWNLOAD_PATH)
	@sudo $(AWS_DOWNLOAD_DIR)/aws/install
	rm -fr $(AWS_DOWNLOAD_DIR)

BAT_VERSION := $(shell curl -s -w '%{redirect_url}\n' 'https://github.com/sharkdp/bat/releases/latest' | cut -d'/' -f8)

bat: /usr/bin/bat

/usr/bin/bat:
	curl -Ls -o /tmp/bat.deb \
		"https://github.com/sharkdp/bat/releases/download/$(BAT_VERSION)/bat_$(BAT_VERSION:v%=%)_amd64.deb"
	sudo dpkg -i /tmp/bat.deb

borgbackup:
	sudo apt-get install --yes borgbackup
.PHONY: borgbackup

borgmatic: borgbackup
	sudo apt-get install --yes borgmatic
.PHONY: borgmatic

DIRENV_VERSION := 2.34.0
direnv: /usr/local/bin/direnv
.PHONY: direnv

/usr/local/bin/direnv:
	download_github_release_artifact "/tmp/direnv" \
		"https://github.com/direnv/direnv" \
		"direnv.linux-amd64" \
		"2.34.0"
	sudo chmod +x /tmp/direnv
	sudo mv /tmp/direnv /usr/local/bin/direnv

# KUBECTX_VERSION := 0.9.5
# kubectx: /usr/local/bin/kubectx
#
# /usr/local/bin/kubectx:
# 	download_github_release_artifact "/tmp/kubectx.tar.gz" \
# 		"https://github.com/ahmetb/kubectx" \
# 		"kubectx_v$(KUBECTX_VERSION)_linux_x86_64.tar.gz" \
# 		$(KUBECTX_VERSION)
# 	tar -xvzf /tmp/kubectx.tar.gz
# 	sudo mv /tmp/kubectx /usr/local/bin/kubectx

eza:
	sudo mkdir -p /etc/apt/keyrings
	mkdir -p "/tmp/$@"
	curl -sSL https://raw.githubusercontent.com/eza-community/eza/main/deb.asc \
		| sudo gpg --dearmor > "/tmp/$@/gierens.gpg"
	sudo mv "/tmp/$@/gierens.gpg" "/etc/apt/keyrings/gierens.gpg"
	echo "deb [arch=$$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/gierens.gpg] http://deb.gierens.de stable main" | sudo tee /etc/apt/sources.list.d/gierens.list
	sudo chmod 0644 /etc/apt/keyrings/gierens.gpg /etc/apt/sources.list.d/gierens.list
	sudo apt-get update
	sudo apt-get install --yes eza
.PHONY: eza

fastfetch: ## system information display app
	sudo add-apt-repository -y ppa:zhangsongcui3371/fastfetch
	sudo apt install --yes fastfetch
.PHONY: fastfetch

HEXYL_VERSION := $(shell curl -s -w '%{redirect_url}\n' 'https://github.com/sharkdp/hexyl/releases/latest' | cut -d'/' -f8)
hexyl: /usr/bin/hexyl

/usr/bin/hexyl:
	curl -sL -o /tmp/hexyl.deb \
		"https://github.com/sharkdp/hexyl/releases/download/$(HEXYL_VERSION)/hexyl_$(HEXYL_VERSION:v%=%)_amd64.deb"
	sudo dpkg -i /tmp/hexyl.deb

FLYCTL_VERSION ?= 0.2.109
FLYCTL_INSTALL_PREFIX := $(HOME)/.fly
FLYCTL_INSTALL_SCRIPT_URL := https://fly.io/install.sh
FLYCTL_DOWNLOAD_DIR := /tmp/flyctl
flyctl: $(FLYCTL_INSTALL_PREFIX)

$(FLYCTL_INSTALL_PREFIX):
	mkdir -p $(FLYCTL_DOWNLOAD_DIR)
	curl -sSLo $(FLYCTL_DOWNLOAD_DIR)/install.sh $(FLYCTL_INSTALL_SCRIPT_URL)
	chmod +x $(FLYCTL_DOWNLOAD_DIR)/install.sh
	FLYCTL_INSTALL=$(FLYCTL_INSTALL_PREFIX) $(FLYCTL_DOWNLOAD_DIR)/install.sh
	rm -fr $(FLYCTL_DOWNLOAD_DIR)

K9S_VERSION := 0.32.5
k9s: /usr/bin/k9s

/usr/bin/k9s:
	download_github_release_artifact "/tmp/k9s.deb" \
		"https://github.com/derailed/k9s" \
		"k9s_linux_amd64.deb" \
		$(K9S_VERSION)
	sudo dpkg -i "/tmp/k9s.deb"

net-tools:
	sudo apt-get install net-tools
.PHONY: net-tools

NVIM_VERSION := 0.10.0
nvim: link-nvim
	LOG_INFO "Setting NeoVim as preferred editor"
	sudo update-alternatives --install /usr/bin/editor editor \
		/usr/local/bin/nvim 100
	sudo update-alternatives --set editor /usr/local/bin/nvim
.PHONY: nvim

unlink-nvim:
	@maybe_unlink_link /usr/local/bin/nvim
	@maybe_unlink_link /usr/local/lib/nvim
	@maybe_unlink_link /usr/local/share/nvim
	@maybe_unlink_link /usr/local/share/man/man1/nvim.1
	@maybe_unlink_link "$(HOME)/.local/share/applications/nvim.desktop"
.PHONY: unlink-nvim

link-nvim: _build/nvim-linux64
	sudo ln -sf "$$PWD/_build/nvim-linux64/bin/nvim" "/usr/local/bin/nvim"
	sudo ln -sf "$$PWD/_build/nvim-linux64/lib/nvim" "/usr/local/lib/nvim"
	sudo ln -sf "$$PWD/_build/nvim-linux64/share/nvim" "/usr/local/share/"
	sudo mkdir -p "/usr/local/share/man/man1"
	sudo ln -sf "$$PWD/_build/nvim-linux64/share/man/man1/nvim.1" \
		"/usr/local/share/man/man1/nvim.1"
	mkdir -p "$(HOME)/.local/share/applications/"
	ln -sf "$$PWD/_build/nvim-linux64/share/applications/nvim.desktop" \
		"$(HOME)/.local/share/applications/"
.PHONY: link-nvim

_build/nvim-linux64: validate-nvim-download
	pushd ./_build && tar -xzf nvim-linux64.tar.gz

validate-nvim-download: fetch-nvim
	pushd ./_build && sha256sum -c nvim-linux64.tar.gz.sha256sum || exit 1
.PHONY: validate-nvim-download

fetch-nvim: _build/nvim-linux64.tar.gz.sha256sum _build/nvim-linux.tar.gz
.PHONY: fetch-nvim

_build/nvim-linux64.tar.gz.sha256sum: _build
	curl -sSLo _build/nvim-linux64.tar.gz.sha256sum \
		'https://github.com/neovim/neovim/releases/download/v$(NVIM_VERSION)/nvim-linux64.tar.gz.sha256sum'

_build/nvim-linux.tar.gz: _build
	curl -sSLo _build/nvim-linux64.tar.gz \
		'https://github.com/neovim/neovim/releases/download/v$(NVIM_VERSION)/nvim-linux64.tar.gz'

VERACRYPT_DOWNLOAD_DIR := /tmp/veracrypt
VERACRYPT_PGP_KEY_PATH := $(VERACRYPT_DOWNLOAD_DIR)/veracrypt.deb.sig
VERACRYPT_DOWNLOAD_PATH := $(VERACRYPT_DOWNLOAD_DIR)/veracrypt.deb
VERACRYPT_VERSION := 1.26.14
veracrypt: /usr/bin/veracrypt ## install veracrypt $$(VERACRYPT_VERSION)

/usr/bin/veracrypt:
	mkdir -p $(VERACRYPT_DOWNLOAD_DIR)
	import_pgp_key_by_url "https://www.idrix.fr/VeraCrypt/VeraCrypt_PGP_public_key.asc"
	# download the package's signature
	curl -sSLo $(VERACRYPT_PGP_KEY_PATH) \
		'https://launchpad.net/veracrypt/trunk/$(VERACRYPT_VERSION)/+download/veracrypt-console-$(VERACRYPT_VERSION)-Ubuntu-22.04-amd64.deb.sig'
	# download the package itself
	curl -sSLo $(VERACRYPT_DOWNLOAD_PATH) \
		'https://launchpad.net/veracrypt/trunk/$(VERACRYPT_VERSION)/+download/veracrypt-console-$(VERACRYPT_VERSION)-Ubuntu-22.04-amd64.deb'
	# verify the downloaded package
	gpg --verify $(VERACRYPT_PGP_KEY_PATH) $(VERACRYPT_DOWNLOAD_PATH)
	# install the package
	sudo dpkg -i /tmp/veracrypt.deb
	rm -rf $(VERACRYPT_DOWNLOAD_DIR)

$(HOME)/enc-vol: veracrypt
	mkdir -p $(HOME)/enc-vol

mount-enc: $(HOME)/enc-vol
	veracrypt -t -k "" --pim=0 --protect-hidden=no enc/vol.vc $(HOME)/enc-vol

umount-enc:
	veracrypt -d $(HOME)/enc-vol
.PHONY: umount-enc

woff-tools:
	sudo apt-get install woff-tools
.PHONY: woff-tools

yq:
	sudo add-apt-repository --yes ppa:rmescandon/yq
	sudo apt-get install --yes yq
.PHONY: yq

Z_VERSION := v1.12
z: /usr/local/src/z

/usr/local/src/z:
	sudo git clone https://github.com/rupa/z.git --branch $(Z_VERSION) /usr/local/src/z 2> /dev/null
	sudo chmod +x /usr/local/src/z/z.sh
	sudo ln -s /usr/local/src/z/z.sh /usr/local/bin/z
