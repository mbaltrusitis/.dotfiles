# vim: filetype=make
# Installs terminal-based applications.
#
# When adding a new application see if the system's package manager is running
# a recent enough version of the software you're looking for and if so, include
# it in the `common` goal.
#
# If there's a ppa or other repo that can be added, break it out into its own
# set of goals.
#
# Since most of the time these dotfiles are running atop an LTS distribution,
# some tools need to be built from source or have the `.deb`s downlaoded out
# of band from apt repositories.
#
# For software needing to add a repo or, being built from source, be sure to
# have a suitable target for your set(s) of goals so that frequent execution of
# the default `make all` goal of the parent `Makefile` can be run quickly.

.ONESHELL:

SHELL := /bin/bash
.SHELLFLAGS := $(DOTSHELLFLAGS)

BASH_ENV := $(BASH_ENV)
DOTFILE_DIR := $(DOTFILE_DIR)
OS := $(OS)

# installers
all: common 1password-cli asdf aws-cli bat borgmatic direnv eza fastfetch hexyl \
	flyctl k9s net-tools nvim veracrypt woff-tools yq z
.PHONY: all

common:: docker
common:: btop
common:: fzf
common:: ripgrep
common:: tldr
common:: tmux
.PHONY: common

extras: yt-dl
.PHONY: yt-dl

btop: /usr/bin/btop
/usr/bin/btop:
	sudo apt-get install --yes btop

docker: /usr/bin/docker
/usr/bin/docker:
	# installs docker as well as desired plugins
	sudo apt-get install --yes docker.io docker-compose-v2 docker-buildx

1password-cli: /usr/bin/op
	if [ -n "$$OP_SERVICE_ACCOUNT_TOKEN" ]; then \
		LOG_INFO "1PW service account token is set. Continuing."; \
	else \
		LOG_ERROR "Set OP_SERVICE_ACCOUNT_TOKEN before continuing. Halting."; \
		exit 1; \
	fi
.PHONY: 1password-cli

asdf:
	$(MAKE) -f ./Makefile.asdf
.PHONY: asdf

aws-cli: /usr/local/bin/aws
AWS_VERSION ?= 2.18.0
AWS_DOWNLOAD_DIR := /tmp/aws-cli
AWS_CLI_PGP_KEY := $(DOTFILE_DIR)/data/aws-cli.key
AWS_SIG_PATH := $(AWS_DOWNLOAD_DIR)/awscliv2.sig
AWS_DOWNLOAD_PATH := $(AWS_DOWNLOAD_DIR)/aws.zip
/usr/local/bin/aws:
	mkdir -p $(AWS_DOWNLOAD_DIR)
	import_pgp_key_by_file $(AWS_CLI_PGP_KEY)
	curl -sSLo $(AWS_DOWNLOAD_PATH) \
		https://awscli.amazonaws.com/awscli-exe-linux-x86_64-$(AWS_VERSION).zip
	curl -sSLo $(AWS_SIG_PATH) \
		https://awscli.amazonaws.com/awscli-exe-linux-x86_64-$(AWS_VERSION).zip.sig
	gpg --verify $(AWS_SIG_PATH) $(AWS_DOWNLOAD_PATH)
	unzip -d $(AWS_DOWNLOAD_DIR) $(AWS_DOWNLOAD_PATH)
	@sudo $(AWS_DOWNLOAD_DIR)/aws/install
	rm -fr $(AWS_DOWNLOAD_DIR)

bat: /usr/bin/bat
BAT_VERSION := $(shell curl -s -w '%{redirect_url}\n' 'https://github.com/sharkdp/bat/releases/latest' | cut -d'/' -f8)
/usr/bin/bat:
	curl -Ls -o /tmp/bat.deb \
		"https://github.com/sharkdp/bat/releases/download/$(BAT_VERSION)/bat_$(BAT_VERSION:v%=%)_amd64.deb"
	sudo dpkg -i /tmp/bat.deb

borgbackup: /usr/bin/borgbackup
/usr/bin/borgbackup:
	sudo apt-get install --yes borgbackup

borgmatic: /usr/bin/borgmatic
/usr/bin/borgmatic:
	sudo apt-get install --yes borgmatic

direnv: /usr/local/bin/direnv
DIRENV_VERSION := 2.34.0
/usr/local/bin/direnv:
	download_github_release_artifact \
		"/tmp/direnv" \
		"https://github.com/direnv/direnv" \
		"direnv.linux-amd64" \
		"v2.34.0"
	sudo mv /tmp/direnv/direnv.linux-amd64 /usr/local/bin/direnv
	sudo chmod +x /usr/local/bin/direnv

eza: /usr/bin/eza
/usr/bin/eza:
	sudo mkdir -p /etc/apt/keyrings
	mkdir -p "/tmp/$@"
	curl -sSL https://raw.githubusercontent.com/eza-community/eza/main/deb.asc \
		| sudo gpg --dearmor > "/tmp/$@/gierens.gpg"
	sudo mv "/tmp/$@/gierens.gpg" "/etc/apt/keyrings/gierens.gpg"
	echo "deb [arch=$$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/gierens.gpg] http://deb.gierens.de stable main" \
		| sudo tee /etc/apt/sources.list.d/gierens.list
	sudo chmod 0644 /etc/apt/keyrings/gierens.gpg /etc/apt/sources.list.d/gierens.list
	sudo apt-get update
	sudo apt-get install --yes eza
.PHONY: eza

fastfetch: /usr/bin/fastfetch ## system information display app
/usr/bin/fastfetch:
	sudo add-apt-repository -y ppa:zhangsongcui3371/fastfetch
	sudo apt install --yes fastfetch
.PHONY: fastfetch

fzf: /usr/bin/fzf
/usr/bin/fzf:
	sudo apt-get install --yes fzf

hexyl: /usr/bin/hexyl
HEXYL_VERSION := $(shell curl -s -w '%{redirect_url}\n' 'https://github.com/sharkdp/hexyl/releases/latest' | cut -d'/' -f8)
/usr/bin/hexyl:
	LOG_INFO "Installing hexyl version: $(HEXYL_VERSION)"
	DOWNLOAD_DIR=$(shell mktemp -d)
	download_github_release_artifact \
		$(DOWNLOAD_DIR) \
		"https://github.com/sharkdp/hexyl" \
		"hexyl_$(HEXYL_VERSION:v%=%)_amd64.deb" \
		"v$(HEXYL_VERSION)"
	sudo dpkg -i "$(DOWNLOAD_DIR)/hexyl_$(HEXYL_VERSION:v%=%)_amd64.deb"

flyctl: $(FLYCTL_INSTALL_PREFIX)
FLYCTL_VERSION ?= 0.2.109
FLYCTL_INSTALL_PREFIX := $(HOME)/.fly
FLYCTL_INSTALL_SCRIPT_URL := https://fly.io/install.sh
FLYCTL_DOWNLOAD_DIR := /tmp/flyctl
$(FLYCTL_INSTALL_PREFIX):
	mkdir -p $(FLYCTL_DOWNLOAD_DIR)
	curl -sSLo $(FLYCTL_DOWNLOAD_DIR)/install.sh $(FLYCTL_INSTALL_SCRIPT_URL)
	chmod +x $(FLYCTL_DOWNLOAD_DIR)/install.sh
	FLYCTL_INSTALL=$(FLYCTL_INSTALL_PREFIX) $(FLYCTL_DOWNLOAD_DIR)/install.sh
	rm -fr $(FLYCTL_DOWNLOAD_DIR)

k9s: /usr/bin/k9s
K9S_VERSION := 0.32.5
/usr/bin/k9s:
	download_github_release_artifact \
		"/tmp/k9s" \
		"https://github.com/derailed/k9s" \
		"k9s_linux_amd64.deb" \
		"v$(K9S_VERSION)"
	sudo dpkg -i "/tmp/k9s/k9s_linux_amd64.deb"

mkcert: /usr/local/bin/mkcert
MKCERT_VERSION := 1.4.4
MKCERT_ARTIFACT := mkcert-v$(MKCERT_VERSION)-linux-amd64
.PHONY: mkcert
/usr/local/bin/mkcert:
	sudo apt-get install libnss3-tools
	download_github_release_artifact \
		"/tmp/mkcert" \
		"https://github.com/FiloSottile/mkcert" \
		"mkcert-v$(MKCERT_VERSION)-linux-amd64" \
		"v$(MKCERT_VERSION)"
	sudo chmod +x /tmp/mkcert/$(MKCERT_ARTIFACT)
	sudo cp "/tmp/mkcert/$(MKCERT_ARTIFACT)" /usr/local/bin/mkcert

net-tools:
	sudo apt-get install net-tools
.PHONY: net-tools

# neovim start
NVIM_VERSION := 0.10.0
nvim: link-nvim
	LOG_INFO "Setting NeoVim as preferred editor"
	sudo update-alternatives --install /usr/bin/editor editor \
		/usr/local/bin/nvim 100
	sudo update-alternatives --set editor /usr/local/bin/nvim
.PHONY: nvim

unlink-nvim:
	@maybe_unlink_link /usr/local/bin/nvim
	@maybe_unlink_link /usr/local/lib/nvim
	@maybe_unlink_link /usr/local/share/nvim
	@maybe_unlink_link /usr/local/share/man/man1/nvim.1
	@maybe_unlink_link "$(HOME)/.local/share/applications/nvim.desktop"
.PHONY: unlink-nvim

link-nvim: _build/nvim-linux64
	sudo ln -sf "$$PWD/_build/nvim-linux64/bin/nvim" "/usr/local/bin/nvim"
	sudo ln -sf "$$PWD/_build/nvim-linux64/lib/nvim" "/usr/local/lib/nvim"
	sudo ln -sf "$$PWD/_build/nvim-linux64/share/nvim" "/usr/local/share/"
	sudo mkdir -p "/usr/local/share/man/man1"
	sudo ln -sf "$$PWD/_build/nvim-linux64/share/man/man1/nvim.1" \
		"/usr/local/share/man/man1/nvim.1"
	mkdir -p "$(HOME)/.local/share/applications/"
	ln -sf "$$PWD/_build/nvim-linux64/share/applications/nvim.desktop" \
		"$(HOME)/.local/share/applications/"
.PHONY: link-nvim

_build/nvim-linux64: validate-nvim-download
	pushd ./_build && tar -xzf nvim-linux64.tar.gz

validate-nvim-download: fetch-nvim
	pushd ./_build && sha256sum -c nvim-linux64.tar.gz.sha256sum || exit 1
.PHONY: validate-nvim-download

fetch-nvim: _build/nvim-linux64.tar.gz.sha256sum _build/nvim-linux.tar.gz
.PHONY: fetch-nvim

_build/nvim-linux64.tar.gz.sha256sum: _build
	curl -sSLo _build/nvim-linux64.tar.gz.sha256sum \
		'https://github.com/neovim/neovim/releases/download/v$(NVIM_VERSION)/nvim-linux64.tar.gz.sha256sum'

_build/nvim-linux.tar.gz: _build
	curl -sSLo _build/nvim-linux64.tar.gz \
		'https://github.com/neovim/neovim/releases/download/v$(NVIM_VERSION)/nvim-linux64.tar.gz'
# neovim final

/usr/bin/op:
	LOG_INFO "Installing 1password CLI (op)"
	curl -sSL https://downloads.1password.com/linux/keys/1password.asc |\
	sudo gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg
	echo "deb [arch=$$(dpkg --print-architecture) signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/$$(dpkg --print-architecture) stable main" |\
		sudo tee /etc/apt/sources.list.d/1password.list
	sudo mkdir -p /etc/debsig/policies/AC2D62742012EA22/
	curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol |\
		sudo tee /etc/debsig/policies/AC2D62742012EA22/1password.pol
	sudo mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22
	curl -sS https://downloads.1password.com/linux/keys/1password.asc |\
		sudo gpg --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg
	sudo apt-get update
	sudo apt-get install --yes 1password-cli

ripgrep: /usr/bin/rg
/usr/bin/rg:
	sudo apt-get install --yes ripgrep

tldr: /usr/bin/tldr
/usr/bin/tldr:
	sudo apt-get install --yes tldr

tmux: /usr/bin/tmux
/usr/bin/tmux:
	sudo apt-get install --yes tmux

# veracrypt start
veracrypt: /usr/bin/veracrypt ## install veracrypt $$(VERACRYPT_VERSION)
VERACRYPT_DOWNLOAD_DIR := /tmp/veracrypt
VERACRYPT_PGP_KEY_PATH := $(VERACRYPT_DOWNLOAD_DIR)/veracrypt.deb.sig
VERACRYPT_DOWNLOAD_PATH := $(VERACRYPT_DOWNLOAD_DIR)/veracrypt.deb
VERACRYPT_VERSION := 1.26.20
/usr/bin/veracrypt:
	mkdir -p $(VERACRYPT_DOWNLOAD_DIR)
	# install veracrypt deps
	sudo apt-get install --yes libfuse2t64 pcscd
	import_pgp_key_by_url "https://www.idrix.fr/VeraCrypt/VeraCrypt_PGP_public_key.asc"
	# download the package's signature
	curl -sSLo $(VERACRYPT_PGP_KEY_PATH) \
		'https://launchpad.net/veracrypt/trunk/$(VERACRYPT_VERSION)/+download/veracrypt-console-$(VERACRYPT_VERSION)-Ubuntu-24.04-amd64.deb.sig'
	# download the package itself
	curl -sSLo $(VERACRYPT_DOWNLOAD_PATH) \
		'https://launchpad.net/veracrypt/trunk/$(VERACRYPT_VERSION)/+download/veracrypt-console-$(VERACRYPT_VERSION)-Ubuntu-24.04-amd64.deb'
	# verify the downloaded package
	gpg --verify $(VERACRYPT_PGP_KEY_PATH) $(VERACRYPT_DOWNLOAD_PATH)
	# install the package
	sudo dpkg -i $(VERACRYPT_DOWNLOAD_PATH)
	rm -rf $(VERACRYPT_DOWNLOAD_DIR)
# veracrypt final

woff-tools: /usr/bin/sfnt2woff /usr/bin/woff2sfnt
/usr/bin/sfnt2woff /usr/bin/woff2sfnt:
	sudo apt-get install woff-tools
.PHONY: woff-tools

yq:
	download_github_release_artifact \
		"/tmp/yq" \
		"https://github.com/mikefarah/yq" \
		"yq_linux_amd64" \
		"v4.45.2"
	chmod +x "/tmp/yq/yq_linux_amd64"
	sudo mv /tmp/yq/yq_linux_amd64 /usr/local/bin/yq
	rm -rf /tmp/yq
.PHONY: yq

yt-dl: /usr/local/bin/yt-dl
YT_DL_VERSION := "2025.04.30"
/usr/local/bin/yt-dl:
	download_github_release_artifact \
		"/tmp/yt-dl" \
		"https://github.com/yt-dlp/yt-dlp" \
		"yt-dlp_linux" \
		"2025.04.30"
	sudo mv /tmp/yt-dl/yt-dlp_linux /usr/local/bin/yt-dl
	sudo chmod +x /usr/local/bin/yt-dl

z: /usr/local/src/z
Z_VERSION := v1.12
/usr/local/src/z:
	sudo git clone https://github.com/rupa/z.git --branch $(Z_VERSION) /usr/local/src/z 2> /dev/null
	sudo chmod +x /usr/local/src/z/z.sh
	sudo ln -s /usr/local/src/z/z.sh /usr/local/bin/z

# procedures
$(HOME)/enc-vol: veracrypt
	mkdir -p $(HOME)/enc-vol

mount-enc: $(HOME)/enc-vol
	veracrypt -t -k "" --pim=0 --protect-hidden=no enc/vol.vc $(HOME)/enc-vol

umount-enc:
	veracrypt -d $(HOME)/enc-vol
.PHONY: umount-enc
